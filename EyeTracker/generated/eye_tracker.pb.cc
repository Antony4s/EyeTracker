// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: eye_tracker.proto
// Protobuf C++ Version: 5.29.2

#include "eye_tracker.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace eye_tracker {

inline constexpr FatigueAlert::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        take_break_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR FatigueAlert::FatigueAlert(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct FatigueAlertDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FatigueAlertDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FatigueAlertDefaultTypeInternal() {}
  union {
    FatigueAlert _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FatigueAlertDefaultTypeInternal _FatigueAlert_default_instance_;

inline constexpr EyeData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : blink_rate_{0},
        ear_{0},
        pupil_dilation_{0},
        gaze_focus_{0},
        timestamp_{::int64_t{0}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR EyeData::EyeData(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct EyeDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EyeDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EyeDataDefaultTypeInternal() {}
  union {
    EyeData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EyeDataDefaultTypeInternal _EyeData_default_instance_;
}  // namespace eye_tracker
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_eye_5ftracker_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_eye_5ftracker_2eproto = nullptr;
const ::uint32_t
    TableStruct_eye_5ftracker_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::eye_tracker::EyeData, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::eye_tracker::EyeData, _impl_.blink_rate_),
        PROTOBUF_FIELD_OFFSET(::eye_tracker::EyeData, _impl_.ear_),
        PROTOBUF_FIELD_OFFSET(::eye_tracker::EyeData, _impl_.pupil_dilation_),
        PROTOBUF_FIELD_OFFSET(::eye_tracker::EyeData, _impl_.gaze_focus_),
        PROTOBUF_FIELD_OFFSET(::eye_tracker::EyeData, _impl_.timestamp_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::eye_tracker::FatigueAlert, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::eye_tracker::FatigueAlert, _impl_.message_),
        PROTOBUF_FIELD_OFFSET(::eye_tracker::FatigueAlert, _impl_.take_break_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::eye_tracker::EyeData)},
        {13, -1, -1, sizeof(::eye_tracker::FatigueAlert)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::eye_tracker::_EyeData_default_instance_._instance,
    &::eye_tracker::_FatigueAlert_default_instance_._instance,
};
const char descriptor_table_protodef_eye_5ftracker_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\021eye_tracker.proto\022\013eye_tracker\"i\n\007EyeD"
    "ata\022\022\n\nblink_rate\030\001 \001(\002\022\013\n\003ear\030\002 \001(\002\022\026\n\016"
    "pupil_dilation\030\003 \001(\002\022\022\n\ngaze_focus\030\004 \001(\002"
    "\022\021\n\ttimestamp\030\005 \001(\003\"3\n\014FatigueAlert\022\017\n\007m"
    "essage\030\001 \001(\t\022\022\n\ntake_break\030\002 \001(\0102Y\n\021EyeT"
    "rackerService\022D\n\rStreamEyeData\022\024.eye_tra"
    "cker.EyeData\032\031.eye_tracker.FatigueAlert("
    "\0010\001b\006proto3"
};
static ::absl::once_flag descriptor_table_eye_5ftracker_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_eye_5ftracker_2eproto = {
    false,
    false,
    291,
    descriptor_table_protodef_eye_5ftracker_2eproto,
    "eye_tracker.proto",
    &descriptor_table_eye_5ftracker_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_eye_5ftracker_2eproto::offsets,
    file_level_enum_descriptors_eye_5ftracker_2eproto,
    file_level_service_descriptors_eye_5ftracker_2eproto,
};
namespace eye_tracker {
// ===================================================================

class EyeData::_Internal {
 public:
};

EyeData::EyeData(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:eye_tracker.EyeData)
}
EyeData::EyeData(
    ::google::protobuf::Arena* arena, const EyeData& from)
    : EyeData(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE EyeData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void EyeData::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, blink_rate_),
           0,
           offsetof(Impl_, timestamp_) -
               offsetof(Impl_, blink_rate_) +
               sizeof(Impl_::timestamp_));
}
EyeData::~EyeData() {
  // @@protoc_insertion_point(destructor:eye_tracker.EyeData)
  SharedDtor(*this);
}
inline void EyeData::SharedDtor(MessageLite& self) {
  EyeData& this_ = static_cast<EyeData&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* EyeData::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) EyeData(arena);
}
constexpr auto EyeData::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(EyeData),
                                            alignof(EyeData));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull EyeData::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_EyeData_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &EyeData::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<EyeData>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &EyeData::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<EyeData>(), &EyeData::ByteSizeLong,
            &EyeData::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(EyeData, _impl_._cached_size_),
        false,
    },
    &EyeData::kDescriptorMethods,
    &descriptor_table_eye_5ftracker_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* EyeData::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 0, 2> EyeData::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::eye_tracker::EyeData>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float blink_rate = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(EyeData, _impl_.blink_rate_)}},
    // float ear = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(EyeData, _impl_.ear_)}},
    // float pupil_dilation = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(EyeData, _impl_.pupil_dilation_)}},
    // float gaze_focus = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(EyeData, _impl_.gaze_focus_)}},
    // int64 timestamp = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(EyeData, _impl_.timestamp_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(EyeData, _impl_.timestamp_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // float blink_rate = 1;
    {PROTOBUF_FIELD_OFFSET(EyeData, _impl_.blink_rate_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float ear = 2;
    {PROTOBUF_FIELD_OFFSET(EyeData, _impl_.ear_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float pupil_dilation = 3;
    {PROTOBUF_FIELD_OFFSET(EyeData, _impl_.pupil_dilation_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float gaze_focus = 4;
    {PROTOBUF_FIELD_OFFSET(EyeData, _impl_.gaze_focus_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // int64 timestamp = 5;
    {PROTOBUF_FIELD_OFFSET(EyeData, _impl_.timestamp_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void EyeData::Clear() {
// @@protoc_insertion_point(message_clear_start:eye_tracker.EyeData)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.blink_rate_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.timestamp_) -
      reinterpret_cast<char*>(&_impl_.blink_rate_)) + sizeof(_impl_.timestamp_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* EyeData::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const EyeData& this_ = static_cast<const EyeData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* EyeData::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const EyeData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:eye_tracker.EyeData)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // float blink_rate = 1;
          if (::absl::bit_cast<::uint32_t>(this_._internal_blink_rate()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_blink_rate(), target);
          }

          // float ear = 2;
          if (::absl::bit_cast<::uint32_t>(this_._internal_ear()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_ear(), target);
          }

          // float pupil_dilation = 3;
          if (::absl::bit_cast<::uint32_t>(this_._internal_pupil_dilation()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_pupil_dilation(), target);
          }

          // float gaze_focus = 4;
          if (::absl::bit_cast<::uint32_t>(this_._internal_gaze_focus()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_gaze_focus(), target);
          }

          // int64 timestamp = 5;
          if (this_._internal_timestamp() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<5>(
                    stream, this_._internal_timestamp(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:eye_tracker.EyeData)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t EyeData::ByteSizeLong(const MessageLite& base) {
          const EyeData& this_ = static_cast<const EyeData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t EyeData::ByteSizeLong() const {
          const EyeData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:eye_tracker.EyeData)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // float blink_rate = 1;
            if (::absl::bit_cast<::uint32_t>(this_._internal_blink_rate()) != 0) {
              total_size += 5;
            }
            // float ear = 2;
            if (::absl::bit_cast<::uint32_t>(this_._internal_ear()) != 0) {
              total_size += 5;
            }
            // float pupil_dilation = 3;
            if (::absl::bit_cast<::uint32_t>(this_._internal_pupil_dilation()) != 0) {
              total_size += 5;
            }
            // float gaze_focus = 4;
            if (::absl::bit_cast<::uint32_t>(this_._internal_gaze_focus()) != 0) {
              total_size += 5;
            }
            // int64 timestamp = 5;
            if (this_._internal_timestamp() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_timestamp());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void EyeData::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<EyeData*>(&to_msg);
  auto& from = static_cast<const EyeData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:eye_tracker.EyeData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint32_t>(from._internal_blink_rate()) != 0) {
    _this->_impl_.blink_rate_ = from._impl_.blink_rate_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_ear()) != 0) {
    _this->_impl_.ear_ = from._impl_.ear_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_pupil_dilation()) != 0) {
    _this->_impl_.pupil_dilation_ = from._impl_.pupil_dilation_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_gaze_focus()) != 0) {
    _this->_impl_.gaze_focus_ = from._impl_.gaze_focus_;
  }
  if (from._internal_timestamp() != 0) {
    _this->_impl_.timestamp_ = from._impl_.timestamp_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EyeData::CopyFrom(const EyeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eye_tracker.EyeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void EyeData::InternalSwap(EyeData* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EyeData, _impl_.timestamp_)
      + sizeof(EyeData::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(EyeData, _impl_.blink_rate_)>(
          reinterpret_cast<char*>(&_impl_.blink_rate_),
          reinterpret_cast<char*>(&other->_impl_.blink_rate_));
}

::google::protobuf::Metadata EyeData::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class FatigueAlert::_Internal {
 public:
};

FatigueAlert::FatigueAlert(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:eye_tracker.FatigueAlert)
}
inline PROTOBUF_NDEBUG_INLINE FatigueAlert::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::eye_tracker::FatigueAlert& from_msg)
      : message_(arena, from.message_),
        _cached_size_{0} {}

FatigueAlert::FatigueAlert(
    ::google::protobuf::Arena* arena,
    const FatigueAlert& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  FatigueAlert* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.take_break_ = from._impl_.take_break_;

  // @@protoc_insertion_point(copy_constructor:eye_tracker.FatigueAlert)
}
inline PROTOBUF_NDEBUG_INLINE FatigueAlert::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : message_(arena),
        _cached_size_{0} {}

inline void FatigueAlert::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.take_break_ = {};
}
FatigueAlert::~FatigueAlert() {
  // @@protoc_insertion_point(destructor:eye_tracker.FatigueAlert)
  SharedDtor(*this);
}
inline void FatigueAlert::SharedDtor(MessageLite& self) {
  FatigueAlert& this_ = static_cast<FatigueAlert&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.message_.Destroy();
  this_._impl_.~Impl_();
}

inline void* FatigueAlert::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) FatigueAlert(arena);
}
constexpr auto FatigueAlert::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(FatigueAlert),
                                            alignof(FatigueAlert));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull FatigueAlert::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_FatigueAlert_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &FatigueAlert::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<FatigueAlert>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &FatigueAlert::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<FatigueAlert>(), &FatigueAlert::ByteSizeLong,
            &FatigueAlert::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(FatigueAlert, _impl_._cached_size_),
        false,
    },
    &FatigueAlert::kDescriptorMethods,
    &descriptor_table_eye_5ftracker_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* FatigueAlert::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 40, 2> FatigueAlert::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::eye_tracker::FatigueAlert>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bool take_break = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(FatigueAlert, _impl_.take_break_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(FatigueAlert, _impl_.take_break_)}},
    // string message = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(FatigueAlert, _impl_.message_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string message = 1;
    {PROTOBUF_FIELD_OFFSET(FatigueAlert, _impl_.message_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool take_break = 2;
    {PROTOBUF_FIELD_OFFSET(FatigueAlert, _impl_.take_break_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\30\7\0\0\0\0\0\0"
    "eye_tracker.FatigueAlert"
    "message"
  }},
};

PROTOBUF_NOINLINE void FatigueAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:eye_tracker.FatigueAlert)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.take_break_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* FatigueAlert::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const FatigueAlert& this_ = static_cast<const FatigueAlert&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* FatigueAlert::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const FatigueAlert& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:eye_tracker.FatigueAlert)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string message = 1;
          if (!this_._internal_message().empty()) {
            const std::string& _s = this_._internal_message();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "eye_tracker.FatigueAlert.message");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // bool take_break = 2;
          if (this_._internal_take_break() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                2, this_._internal_take_break(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:eye_tracker.FatigueAlert)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t FatigueAlert::ByteSizeLong(const MessageLite& base) {
          const FatigueAlert& this_ = static_cast<const FatigueAlert&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t FatigueAlert::ByteSizeLong() const {
          const FatigueAlert& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:eye_tracker.FatigueAlert)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string message = 1;
            if (!this_._internal_message().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_message());
            }
            // bool take_break = 2;
            if (this_._internal_take_break() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void FatigueAlert::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<FatigueAlert*>(&to_msg);
  auto& from = static_cast<const FatigueAlert&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:eye_tracker.FatigueAlert)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_take_break() != 0) {
    _this->_impl_.take_break_ = from._impl_.take_break_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FatigueAlert::CopyFrom(const FatigueAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eye_tracker.FatigueAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void FatigueAlert::InternalSwap(FatigueAlert* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
        swap(_impl_.take_break_, other->_impl_.take_break_);
}

::google::protobuf::Metadata FatigueAlert::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace eye_tracker
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_eye_5ftracker_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
