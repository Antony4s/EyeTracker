// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: eye_tracker.proto
// Protobuf C++ Version: 5.29.2

#ifndef eye_5ftracker_2eproto_2epb_2eh
#define eye_5ftracker_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_eye_5ftracker_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_eye_5ftracker_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_eye_5ftracker_2eproto;
namespace eye_tracker {
class EyeData;
struct EyeDataDefaultTypeInternal;
extern EyeDataDefaultTypeInternal _EyeData_default_instance_;
class FatigueAlert;
struct FatigueAlertDefaultTypeInternal;
extern FatigueAlertDefaultTypeInternal _FatigueAlert_default_instance_;
}  // namespace eye_tracker
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace eye_tracker {

// ===================================================================


// -------------------------------------------------------------------

class FatigueAlert final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:eye_tracker.FatigueAlert) */ {
 public:
  inline FatigueAlert() : FatigueAlert(nullptr) {}
  ~FatigueAlert() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(FatigueAlert* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(FatigueAlert));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FatigueAlert(
      ::google::protobuf::internal::ConstantInitialized);

  inline FatigueAlert(const FatigueAlert& from) : FatigueAlert(nullptr, from) {}
  inline FatigueAlert(FatigueAlert&& from) noexcept
      : FatigueAlert(nullptr, std::move(from)) {}
  inline FatigueAlert& operator=(const FatigueAlert& from) {
    CopyFrom(from);
    return *this;
  }
  inline FatigueAlert& operator=(FatigueAlert&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FatigueAlert& default_instance() {
    return *internal_default_instance();
  }
  static inline const FatigueAlert* internal_default_instance() {
    return reinterpret_cast<const FatigueAlert*>(
        &_FatigueAlert_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(FatigueAlert& a, FatigueAlert& b) { a.Swap(&b); }
  inline void Swap(FatigueAlert* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FatigueAlert* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FatigueAlert* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<FatigueAlert>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FatigueAlert& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FatigueAlert& from) { FatigueAlert::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(FatigueAlert* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "eye_tracker.FatigueAlert"; }

 protected:
  explicit FatigueAlert(::google::protobuf::Arena* arena);
  FatigueAlert(::google::protobuf::Arena* arena, const FatigueAlert& from);
  FatigueAlert(::google::protobuf::Arena* arena, FatigueAlert&& from) noexcept
      : FatigueAlert(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 1,
    kTakeBreakFieldNumber = 2,
  };
  // string message = 1;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // bool take_break = 2;
  void clear_take_break() ;
  bool take_break() const;
  void set_take_break(bool value);

  private:
  bool _internal_take_break() const;
  void _internal_set_take_break(bool value);

  public:
  // @@protoc_insertion_point(class_scope:eye_tracker.FatigueAlert)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      40, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const FatigueAlert& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    bool take_break_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_eye_5ftracker_2eproto;
};
// -------------------------------------------------------------------

class EyeData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:eye_tracker.EyeData) */ {
 public:
  inline EyeData() : EyeData(nullptr) {}
  ~EyeData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(EyeData* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(EyeData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EyeData(
      ::google::protobuf::internal::ConstantInitialized);

  inline EyeData(const EyeData& from) : EyeData(nullptr, from) {}
  inline EyeData(EyeData&& from) noexcept
      : EyeData(nullptr, std::move(from)) {}
  inline EyeData& operator=(const EyeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline EyeData& operator=(EyeData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EyeData& default_instance() {
    return *internal_default_instance();
  }
  static inline const EyeData* internal_default_instance() {
    return reinterpret_cast<const EyeData*>(
        &_EyeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(EyeData& a, EyeData& b) { a.Swap(&b); }
  inline void Swap(EyeData* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EyeData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EyeData* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<EyeData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EyeData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EyeData& from) { EyeData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(EyeData* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "eye_tracker.EyeData"; }

 protected:
  explicit EyeData(::google::protobuf::Arena* arena);
  EyeData(::google::protobuf::Arena* arena, const EyeData& from);
  EyeData(::google::protobuf::Arena* arena, EyeData&& from) noexcept
      : EyeData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBlinkRateFieldNumber = 1,
    kEarFieldNumber = 2,
    kPupilDilationFieldNumber = 3,
    kGazeFocusFieldNumber = 4,
    kTimestampFieldNumber = 5,
  };
  // float blink_rate = 1;
  void clear_blink_rate() ;
  float blink_rate() const;
  void set_blink_rate(float value);

  private:
  float _internal_blink_rate() const;
  void _internal_set_blink_rate(float value);

  public:
  // float ear = 2;
  void clear_ear() ;
  float ear() const;
  void set_ear(float value);

  private:
  float _internal_ear() const;
  void _internal_set_ear(float value);

  public:
  // float pupil_dilation = 3;
  void clear_pupil_dilation() ;
  float pupil_dilation() const;
  void set_pupil_dilation(float value);

  private:
  float _internal_pupil_dilation() const;
  void _internal_set_pupil_dilation(float value);

  public:
  // float gaze_focus = 4;
  void clear_gaze_focus() ;
  float gaze_focus() const;
  void set_gaze_focus(float value);

  private:
  float _internal_gaze_focus() const;
  void _internal_set_gaze_focus(float value);

  public:
  // int64 timestamp = 5;
  void clear_timestamp() ;
  ::int64_t timestamp() const;
  void set_timestamp(::int64_t value);

  private:
  ::int64_t _internal_timestamp() const;
  void _internal_set_timestamp(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:eye_tracker.EyeData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EyeData& from_msg);
    float blink_rate_;
    float ear_;
    float pupil_dilation_;
    float gaze_focus_;
    ::int64_t timestamp_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_eye_5ftracker_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// EyeData

// float blink_rate = 1;
inline void EyeData::clear_blink_rate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.blink_rate_ = 0;
}
inline float EyeData::blink_rate() const {
  // @@protoc_insertion_point(field_get:eye_tracker.EyeData.blink_rate)
  return _internal_blink_rate();
}
inline void EyeData::set_blink_rate(float value) {
  _internal_set_blink_rate(value);
  // @@protoc_insertion_point(field_set:eye_tracker.EyeData.blink_rate)
}
inline float EyeData::_internal_blink_rate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.blink_rate_;
}
inline void EyeData::_internal_set_blink_rate(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.blink_rate_ = value;
}

// float ear = 2;
inline void EyeData::clear_ear() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ear_ = 0;
}
inline float EyeData::ear() const {
  // @@protoc_insertion_point(field_get:eye_tracker.EyeData.ear)
  return _internal_ear();
}
inline void EyeData::set_ear(float value) {
  _internal_set_ear(value);
  // @@protoc_insertion_point(field_set:eye_tracker.EyeData.ear)
}
inline float EyeData::_internal_ear() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ear_;
}
inline void EyeData::_internal_set_ear(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ear_ = value;
}

// float pupil_dilation = 3;
inline void EyeData::clear_pupil_dilation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pupil_dilation_ = 0;
}
inline float EyeData::pupil_dilation() const {
  // @@protoc_insertion_point(field_get:eye_tracker.EyeData.pupil_dilation)
  return _internal_pupil_dilation();
}
inline void EyeData::set_pupil_dilation(float value) {
  _internal_set_pupil_dilation(value);
  // @@protoc_insertion_point(field_set:eye_tracker.EyeData.pupil_dilation)
}
inline float EyeData::_internal_pupil_dilation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pupil_dilation_;
}
inline void EyeData::_internal_set_pupil_dilation(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pupil_dilation_ = value;
}

// float gaze_focus = 4;
inline void EyeData::clear_gaze_focus() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gaze_focus_ = 0;
}
inline float EyeData::gaze_focus() const {
  // @@protoc_insertion_point(field_get:eye_tracker.EyeData.gaze_focus)
  return _internal_gaze_focus();
}
inline void EyeData::set_gaze_focus(float value) {
  _internal_set_gaze_focus(value);
  // @@protoc_insertion_point(field_set:eye_tracker.EyeData.gaze_focus)
}
inline float EyeData::_internal_gaze_focus() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.gaze_focus_;
}
inline void EyeData::_internal_set_gaze_focus(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gaze_focus_ = value;
}

// int64 timestamp = 5;
inline void EyeData::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = ::int64_t{0};
}
inline ::int64_t EyeData::timestamp() const {
  // @@protoc_insertion_point(field_get:eye_tracker.EyeData.timestamp)
  return _internal_timestamp();
}
inline void EyeData::set_timestamp(::int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:eye_tracker.EyeData.timestamp)
}
inline ::int64_t EyeData::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_;
}
inline void EyeData::_internal_set_timestamp(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = value;
}

// -------------------------------------------------------------------

// FatigueAlert

// string message = 1;
inline void FatigueAlert::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& FatigueAlert::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:eye_tracker.FatigueAlert.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FatigueAlert::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:eye_tracker.FatigueAlert.message)
}
inline std::string* FatigueAlert::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:eye_tracker.FatigueAlert.message)
  return _s;
}
inline const std::string& FatigueAlert::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void FatigueAlert::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* FatigueAlert::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* FatigueAlert::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:eye_tracker.FatigueAlert.message)
  return _impl_.message_.Release();
}
inline void FatigueAlert::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:eye_tracker.FatigueAlert.message)
}

// bool take_break = 2;
inline void FatigueAlert::clear_take_break() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.take_break_ = false;
}
inline bool FatigueAlert::take_break() const {
  // @@protoc_insertion_point(field_get:eye_tracker.FatigueAlert.take_break)
  return _internal_take_break();
}
inline void FatigueAlert::set_take_break(bool value) {
  _internal_set_take_break(value);
  // @@protoc_insertion_point(field_set:eye_tracker.FatigueAlert.take_break)
}
inline bool FatigueAlert::_internal_take_break() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.take_break_;
}
inline void FatigueAlert::_internal_set_take_break(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.take_break_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace eye_tracker


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // eye_5ftracker_2eproto_2epb_2eh
